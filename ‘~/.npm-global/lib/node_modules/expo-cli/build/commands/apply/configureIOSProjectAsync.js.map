{"version":3,"sources":["../../../src/commands/apply/configureIOSProjectAsync.ts"],"names":["configureIOSProjectAsync","projectRoot","bundleIdentifier","expoUsername","process","env","EAS_BUILD_USERNAME","UserManager","getCurrentUsernameAsync","exp","config","skipSDKVersionRequirement","isModdedConfig","log","isDebug","debug","mods","rest","info","JSON","stringify"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAEe,eAAeA,wBAAf,CAAwCC,WAAxC,EAA6D;AAC1E;AACA,QAAMC,gBAAgB,GAAG,MAAM,wDAA+BD,WAA/B,CAA/B;AACA,QAAME,YAAY,GAChBC,OAAO,CAACC,GAAR,CAAYC,kBAAZ,KAAmC,MAAMC,mBAAYC,uBAAZ,EAAzC,CADF;AAGA,MAAI;AAAEC,IAAAA,GAAG,EAAEC;AAAP,MAAkB,yBAAUT,WAAV,EAAuB;AAC3CU,IAAAA,yBAAyB,EAAE,IADgB;AAE3CC,IAAAA,cAAc,EAAE;AAF2B,GAAvB,CAAtB,CAN0E,CAW1E;;AACAF,EAAAA,MAAM,GAAG,yCAAmBA,MAAnB,EAA2B;AAClCR,IAAAA,gBADkC;AAElCC,IAAAA;AAFkC,GAA3B,CAAT,CAZ0E,CAiB1E;;AACAO,EAAAA,MAAM,GAAG,MAAM,uCAAiBA,MAAjB,EAAyBT,WAAzB,CAAf;;AAEA,MAAIY,eAAIC,OAAR,EAAiB;AACfD,mBAAIE,KAAJ;;AACAF,mBAAIE,KAAJ,CAAU,uBAAV,EAFe,CAGf;;;AACA,UAAM;AAAEC,MAAAA,IAAF;AAAQ,SAAGC;AAAX,QAAoBP,MAA1B;;AACAG,mBAAIK,IAAJ,CAASC,IAAI,CAACC,SAAL,CAAeH,IAAf,EAAqB,IAArB,EAA2B,CAA3B,CAAT;;AACAJ,mBAAIK,IAAJ,CAASF,IAAT;;AACAH,mBAAIE,KAAJ;AACD;AACF","sourcesContent":["import { getConfig } from '@expo/config';\nimport { compileModsAsync, withExpoIOSPlugins } from '@expo/config-plugins';\nimport { UserManager } from '@expo/xdl';\n\nimport log from '../../log';\nimport { getOrPromptForBundleIdentifier } from '../eject/ConfigValidation';\n\nexport default async function configureIOSProjectAsync(projectRoot: string) {\n  // Check bundle ID before reading the config because it may mutate the config if the user is prompted to define it.\n  const bundleIdentifier = await getOrPromptForBundleIdentifier(projectRoot);\n  const expoUsername =\n    process.env.EAS_BUILD_USERNAME || (await UserManager.getCurrentUsernameAsync());\n\n  let { exp: config } = getConfig(projectRoot, {\n    skipSDKVersionRequirement: true,\n    isModdedConfig: true,\n  });\n\n  // Add all built-in plugins\n  config = withExpoIOSPlugins(config, {\n    bundleIdentifier,\n    expoUsername,\n  });\n\n  // compile all plugins and mods\n  config = await compileModsAsync(config, projectRoot);\n\n  if (log.isDebug) {\n    log.debug();\n    log.debug('Evaluated iOS config:');\n    // @ts-ignore: mods not on config type\n    const { mods, ...rest } = config;\n    log.info(JSON.stringify(rest, null, 2));\n    log.info(mods);\n    log.debug();\n  }\n}\n"],"file":"configureIOSProjectAsync.js"}