{"version":3,"sources":["../../src/commands/init.ts"],"names":["FEATURED_TEMPLATES","shortName","name","description","BARE_WORKFLOW_TEMPLATES","isMacOS","process","platform","assertValidName","folderName","validation","CreateApp","validateName","CommandError","chalk","red","parseOptions","command","yes","yarn","npm","install","template","undefined","assertFolderEmptyAsync","projectRoot","overwrite","message","log","newLine","nested","SilentError","resolveProjectRootAsync","input","trim","answer","type","initial","validate","path","basename","resolve","nonInteractiveHelp","error","code","green","program","cyan","join","fs","ensureDir","action","projectDir","options","cwd","resolvedTemplate","templateSpec","registry","escapedName","raw","descriptionColumn","Math","max","map","t","length","optionsPerPage","choices","prompts","separator","value","title","bold","stdout","columns","short","projectName","initialConfig","expo","slug","templateManifest","pacote","manifest","isBare","includes","extractTemplateStep","logNewSection","projectPath","Exp","extractAndPrepareTemplateAppAsync","succeed","e","fail","packageManager","resolvePackageManager","workflow","podsInstalled","needsPodsInstalled","existsSync","installNodeDependenciesAsync","installCocoaPodsAsync","cdPath","getChangeDirectoryPath","showPublishBeforeBuildWarning","didConfigureUpdatesProjectFiles","username","UserManager","getCurrentUsernameAsync","configureUpdatesProjectFilesAsync","addNewLineIfNone","logProjectReadyAsync","logNodeInstallWarning","logCocoaPodsWarning","initGitRepoAsync","silent","commit","installJsDepsStep","root","flags","errno","warn","stdio","dim","macOSComment","exp","skipSDKVersionRequirement","androidManifestPath","AndroidConfig","Paths","getAndroidManifestAsync","androidManifestJSON","Manifest","readAndroidManifestAsync","result","Updates","setUpdatesConfig","writeAndroidManifestAsync","iosSourceRoot","IOSConfig","getSourceRoot","supportingDirectory","plistFilePath","data","plist","parse","readFileSync","writeFile","build","alias","helpGroup","option","asyncAction"],"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","sourcesContent":["import { BareAppConfig, getConfig } from '@expo/config';\nimport { AndroidConfig, IOSConfig } from '@expo/config-plugins';\nimport plist from '@expo/plist';\nimport spawnAsync from '@expo/spawn-async';\nimport { Exp, UserManager } from '@expo/xdl';\nimport chalk from 'chalk';\nimport program, { Command } from 'commander';\nimport fs from 'fs-extra';\nimport padEnd from 'lodash/padEnd';\nimport trimStart from 'lodash/trimStart';\nimport npmPackageArg from 'npm-package-arg';\nimport pacote from 'pacote';\nimport path from 'path';\nimport terminalLink from 'terminal-link';\nimport wordwrap from 'wordwrap';\n\nimport CommandError, { SilentError } from '../CommandError';\nimport log from '../log';\nimport prompts, { selectAsync } from '../prompts';\nimport * as CreateApp from './utils/CreateApp';\nimport { usesOldExpoUpdatesAsync } from './utils/ProjectUtils';\n\ntype Options = {\n  template?: string;\n  install: boolean;\n  npm: boolean;\n  yarn: boolean;\n  yes: boolean;\n  name?: string;\n};\n\nconst FEATURED_TEMPLATES = [\n  '----- Managed workflow -----',\n  {\n    shortName: 'blank',\n    name: 'expo-template-blank',\n    description: 'a minimal app as clean as an empty canvas',\n  },\n  {\n    shortName: 'blank (TypeScript)',\n    name: 'expo-template-blank-typescript',\n    description: 'same as blank but with TypeScript configuration',\n  },\n  {\n    shortName: 'tabs (TypeScript)',\n    name: 'expo-template-tabs',\n    description: 'several example screens and tabs using react-navigation and TypeScript',\n  },\n  '----- Bare workflow -----',\n  {\n    shortName: 'minimal',\n    name: 'expo-template-bare-minimum',\n    description: 'bare and minimal, just the essentials to get you started',\n  },\n  {\n    shortName: 'minimal (TypeScript)',\n    name: 'expo-template-bare-typescript',\n    description: 'same as minimal but with TypeScript configuration',\n  },\n];\n\nconst BARE_WORKFLOW_TEMPLATES = ['expo-template-bare-minimum', 'expo-template-bare-typescript'];\nconst isMacOS = process.platform === 'darwin';\n\nfunction assertValidName(folderName: string) {\n  const validation = CreateApp.validateName(folderName);\n  if (typeof validation === 'string') {\n    throw new CommandError(\n      `Cannot create an app named ${chalk.red(`\"${folderName}\"`)}. ${validation}`\n    );\n  }\n}\n\nfunction parseOptions(command: Command): Options {\n  return {\n    yes: !!command.yes,\n    yarn: !!command.yarn,\n    npm: !!command.npm,\n    install: !!command.install,\n    template: command.template,\n    /// XXX(ville): this is necessary because with Commander.js, when the --name\n    // option is not set, `command.name` will point to `Command.prototype.name`.\n    name: typeof command.name === 'string' ? ((command.name as unknown) as string) : undefined,\n  };\n}\n\nasync function assertFolderEmptyAsync(projectRoot: string, folderName?: string) {\n  if (!(await CreateApp.assertFolderEmptyAsync({ projectRoot, folderName, overwrite: false }))) {\n    const message = 'Try using a new directory name, or moving these files.';\n    log.newLine();\n    log.nested(message);\n    log.newLine();\n    throw new SilentError(message);\n  }\n}\n\nasync function resolveProjectRootAsync(input?: string): Promise<string> {\n  let name = input?.trim();\n\n  if (!name) {\n    try {\n      const { answer } = await prompts(\n        {\n          type: 'text',\n          name: 'answer',\n          message: 'What would you like to name your app?',\n          initial: 'my-app',\n          validate: name => {\n            const validation = CreateApp.validateName(path.basename(path.resolve(name)));\n            if (typeof validation === 'string') {\n              return 'Invalid project name: ' + validation;\n            }\n            return true;\n          },\n        },\n        {\n          nonInteractiveHelp: 'Pass the project name using the first argument `expo init <name>`',\n        }\n      );\n\n      if (typeof answer === 'string') {\n        name = answer.trim();\n      }\n    } catch (error) {\n      // Handle the aborted message in a custom way.\n      if (error.code !== 'ABORTED') {\n        throw error;\n      }\n    }\n  }\n\n  if (!name) {\n    const message = [\n      '',\n      'Please choose your app name:',\n      `  ${log.chalk.green(`${program.name()} init`)} ${log.chalk.cyan('<app-name>')}`,\n      '',\n      `Run ${log.chalk.green(`${program.name()} init --help`)} for more info`,\n      '',\n    ].join('\\n');\n    log.nested(message);\n    throw new SilentError(message);\n  }\n\n  const projectRoot = path.resolve(name);\n  const folderName = path.basename(projectRoot);\n\n  assertValidName(folderName);\n\n  await fs.ensureDir(projectRoot);\n\n  await assertFolderEmptyAsync(projectRoot, folderName);\n\n  return projectRoot;\n}\n\nasync function action(projectDir: string, command: Command) {\n  const options = parseOptions(command);\n\n  // Resolve the name, and projectRoot\n  let projectRoot: string;\n  if (!projectDir && options.yes) {\n    projectRoot = path.resolve(process.cwd());\n    const folderName = path.basename(projectRoot);\n    assertValidName(folderName);\n    await assertFolderEmptyAsync(projectRoot, folderName);\n  } else {\n    projectRoot = await resolveProjectRootAsync(projectDir || options.name);\n  }\n\n  let resolvedTemplate: string | null = options.template ?? null;\n  // @ts-ignore: This guards against someone passing --template without a name after it.\n  if (resolvedTemplate === true) {\n    throw new CommandError('Please specify the template name');\n  }\n\n  // Download and sync templates\n  // TODO(Bacon): revisit\n  if (options.yes && !resolvedTemplate) {\n    resolvedTemplate = 'blank';\n  }\n\n  let templateSpec;\n  if (resolvedTemplate) {\n    templateSpec = npmPackageArg(resolvedTemplate);\n\n    // For backwards compatibility, 'blank' and 'tabs' are aliases for\n    // 'expo-template-blank' and 'expo-template-tabs', respectively.\n    if (\n      (templateSpec.name === 'blank' ||\n        templateSpec.name === 'tabs' ||\n        templateSpec.name === 'bare-minimum') &&\n      templateSpec.registry\n    ) {\n      templateSpec.escapedName = `expo-template-${templateSpec.name}`;\n      templateSpec.name = templateSpec.escapedName;\n      templateSpec.raw = templateSpec.escapedName;\n    }\n  } else {\n    const descriptionColumn =\n      Math.max(...FEATURED_TEMPLATES.map(t => (typeof t === 'object' ? t.shortName.length : 0))) +\n      2;\n    const template = await selectAsync(\n      {\n        message: 'Choose a template:',\n        optionsPerPage: 20,\n        choices: FEATURED_TEMPLATES.map(template => {\n          if (typeof template === 'string') {\n            return prompts.separator(template);\n          } else {\n            return {\n              value: template.name,\n              title:\n                chalk.bold(padEnd(template.shortName, descriptionColumn)) +\n                trimStart(\n                  wordwrap(\n                    descriptionColumn + 2,\n                    process.stdout.columns || 80\n                  )(template.description)\n                ),\n              short: template.name,\n            };\n          }\n        }),\n      },\n      {\n        nonInteractiveHelp:\n          '--template: argument is required in non-interactive mode. Valid choices are: \"blank\", \"tabs\", \"bare-minimum\" or any custom template (name of npm package).',\n      }\n    );\n    templateSpec = npmPackageArg(template);\n  }\n\n  const projectName = path.basename(projectRoot);\n  const initialConfig: Record<string, any> & { expo: any } = {\n    expo: {\n      name: projectName,\n      slug: projectName,\n    },\n  };\n  const templateManifest = await pacote.manifest(templateSpec);\n  // TODO: Use presence of ios/android folder instead.\n  const isBare = BARE_WORKFLOW_TEMPLATES.includes(templateManifest.name);\n  if (isBare) {\n    initialConfig.name = projectName;\n  }\n\n  const extractTemplateStep = CreateApp.logNewSection('Downloading and extracting project files.');\n  let projectPath;\n  try {\n    projectPath = await Exp.extractAndPrepareTemplateAppAsync(\n      templateSpec,\n      projectRoot,\n      initialConfig\n    );\n    extractTemplateStep.succeed('Downloaded and extracted project files.');\n  } catch (e) {\n    extractTemplateStep.fail(\n      'Something went wrong in downloading and extracting the project files.'\n    );\n    throw e;\n  }\n\n  // Install dependencies\n\n  const packageManager = CreateApp.resolvePackageManager(options);\n\n  // TODO: not this\n  const workflow = isBare ? 'bare' : 'managed';\n\n  let podsInstalled: boolean = false;\n  const needsPodsInstalled = fs.existsSync(path.join(projectRoot, 'ios'));\n  if (options.install) {\n    await installNodeDependenciesAsync(projectRoot, packageManager);\n    if (needsPodsInstalled) {\n      podsInstalled = await CreateApp.installCocoaPodsAsync(projectRoot);\n    }\n  }\n\n  // Configure updates (?)\n\n  const cdPath = CreateApp.getChangeDirectoryPath(projectRoot);\n\n  let showPublishBeforeBuildWarning: boolean | undefined;\n  let didConfigureUpdatesProjectFiles: boolean = false;\n  let username: string | null = null;\n\n  if (isBare) {\n    username = await UserManager.getCurrentUsernameAsync();\n    if (username) {\n      try {\n        await configureUpdatesProjectFilesAsync(projectPath, initialConfig as any, username);\n        didConfigureUpdatesProjectFiles = true;\n      } catch {}\n    }\n    showPublishBeforeBuildWarning = await usesOldExpoUpdatesAsync(projectPath);\n  }\n\n  // Log info\n\n  log.addNewLineIfNone();\n  await logProjectReadyAsync({\n    cdPath,\n    packageManager,\n    workflow,\n    showPublishBeforeBuildWarning,\n    didConfigureUpdatesProjectFiles,\n    username,\n  });\n\n  // Log a warning about needing to install node modules\n  if (!options.install) {\n    logNodeInstallWarning(cdPath, packageManager);\n  }\n  if (needsPodsInstalled && !podsInstalled) {\n    logCocoaPodsWarning(cdPath);\n  }\n\n  // Initialize Git at the end to ensure all lock files are committed.\n  // for now, we will just init a git repo if they have git installed and the\n  // project is not inside an existing git tree, and do it silently. we should\n  // at some point check if git is installed and actually bail out if not, because\n  // npm install will fail with a confusing error if so.\n  try {\n    // check if git is installed\n    // check if inside git repo\n    await initGitRepoAsync(projectPath, { silent: true, commit: true });\n  } catch {\n    // todo: check if git is installed, bail out\n  }\n}\n\nasync function installNodeDependenciesAsync(projectRoot: string, packageManager: 'yarn' | 'npm') {\n  const installJsDepsStep = CreateApp.logNewSection('Installing JavaScript dependencies.');\n  try {\n    await CreateApp.installNodeDependenciesAsync(projectRoot, packageManager);\n    installJsDepsStep.succeed('Installed JavaScript dependencies.');\n  } catch {\n    installJsDepsStep.fail(\n      `Something went wrong installing JavaScript dependencies. Check your ${packageManager} logs. Continuing to initialize the app.`\n    );\n  }\n}\n\nexport async function initGitRepoAsync(\n  root: string,\n  flags: { silent: boolean; commit: boolean } = { silent: false, commit: true }\n) {\n  // let's see if we're in a git tree\n  try {\n    await spawnAsync('git', ['rev-parse', '--is-inside-work-tree'], {\n      cwd: root,\n    });\n    !flags.silent && log('New project is already inside of a git repo, skipping git init.');\n  } catch (e) {\n    if (e.errno === 'ENOENT') {\n      !flags.silent && log.warn('Unable to initialize git repo. `git` not in PATH.');\n      return false;\n    }\n  }\n\n  // not in git tree, so let's init\n  try {\n    await spawnAsync('git', ['init'], { cwd: root });\n    !flags.silent && log('Initialized a git repository.');\n\n    if (flags.commit) {\n      await spawnAsync('git', ['add', '--all'], { cwd: root, stdio: 'ignore' });\n      await spawnAsync('git', ['commit', '-m', 'Created a new Expo app'], {\n        cwd: root,\n        stdio: 'ignore',\n      });\n    }\n    return true;\n  } catch (e) {\n    // no-op -- this is just a convenience and we don't care if it fails\n    return false;\n  }\n}\n\n// TODO: Use in eject\nfunction logNodeInstallWarning(cdPath: string, packageManager: 'yarn' | 'npm'): void {\n  log.newLine();\n  log.nested(`⚠️  Before running your app, make sure you have node modules installed:`);\n  log.nested('');\n  if (cdPath) {\n    // In the case of --yes the project can be created in place so there would be no need to change directories.\n    log.nested(`  cd ${cdPath}/`);\n  }\n  log.nested(`  ${packageManager === 'npm' ? 'npm install' : 'yarn'}`);\n  log.nested('');\n}\n\n// TODO: Use in eject\nfunction logCocoaPodsWarning(cdPath: string): void {\n  if (process.platform !== 'darwin') {\n    return;\n  }\n  log.newLine();\n  log.nested(\n    `⚠️  Before running your app on iOS, make sure you have CocoaPods installed and initialize the project:`\n  );\n  log.nested('');\n  if (cdPath) {\n    // In the case of --yes the project can be created in place so there would be no need to change directories.\n    log.nested(`  cd ${cdPath}/`);\n  }\n  log.nested(`  npx pod-install`);\n  log.nested('');\n}\n\n// TODO: Use in eject\nfunction logProjectReadyAsync({\n  cdPath,\n  packageManager,\n  workflow,\n  showPublishBeforeBuildWarning,\n  didConfigureUpdatesProjectFiles,\n  username,\n}: {\n  cdPath: string;\n  packageManager: string;\n  workflow: 'managed' | 'bare';\n  showPublishBeforeBuildWarning?: boolean;\n  didConfigureUpdatesProjectFiles?: boolean;\n  username?: string | null;\n}) {\n  log.nested(chalk.bold(`✅ Your project is ready!`));\n  log.newLine();\n\n  // empty string if project was created in current directory\n  if (cdPath) {\n    log.nested(\n      `To run your project, navigate to the directory and run one of the following ${packageManager} commands.`\n    );\n    log.newLine();\n    log.nested(`- ${chalk.bold('cd ' + cdPath)}`);\n  } else {\n    log.nested(`To run your project, run one of the following ${packageManager} commands.`);\n    log.newLine();\n  }\n\n  if (workflow === 'managed') {\n    log.nested(\n      `- ${chalk.bold(`${packageManager} start`)} ${chalk.dim(\n        `# you can open iOS, Android, or web from here, or run them directly with the commands below.`\n      )}`\n    );\n  }\n  log.nested(`- ${chalk.bold(packageManager === 'npm' ? 'npm run android' : 'yarn android')}`);\n\n  let macOSComment = '';\n  if (!isMacOS && workflow === 'bare') {\n    macOSComment =\n      ' # you need to use macOS to build the iOS project - use managed workflow if you need to do iOS development without a Mac';\n  } else if (!isMacOS && workflow === 'managed') {\n    macOSComment = ' # requires an iOS device or macOS for access to an iOS simulator';\n  }\n  log.nested(\n    `- ${chalk.bold(packageManager === 'npm' ? 'npm run ios' : 'yarn ios')}${macOSComment}`\n  );\n\n  log.nested(`- ${chalk.bold(packageManager === 'npm' ? 'npm run web' : 'yarn web')}`);\n\n  if (workflow === 'bare') {\n    log.newLine();\n    log.nested(\n      `💡 You can also open up the projects in the ${chalk.bold('ios')} and ${chalk.bold(\n        'android'\n      )} directories with their respective IDEs.`\n    );\n\n    if (showPublishBeforeBuildWarning) {\n      log.nested(\n        `🚀 ${terminalLink(\n          'expo-updates',\n          'https://github.com/expo/expo/blob/master/packages/expo-updates/README.md'\n        )} has been configured in your project. Before you do a release build, make sure you run ${chalk.bold(\n          'expo publish'\n        )}. ${terminalLink('Learn more.', 'https://expo.fyi/release-builds-with-expo-updates')}`\n      );\n    } else if (didConfigureUpdatesProjectFiles) {\n      log.nested(\n        `🚀 ${terminalLink(\n          'expo-updates',\n          'https://github.com/expo/expo/blob/master/packages/expo-updates/README.md'\n        )} has been configured in your project. If you publish this project under a different user account than ${chalk.bold(\n          username\n        )}, you'll need to update the configuration in Expo.plist and AndroidManifest.xml before making a release build.`\n      );\n    } else {\n      log.nested(\n        `🚀 ${terminalLink(\n          'expo-updates',\n          'https://github.com/expo/expo/blob/master/packages/expo-updates/README.md'\n        )} has been installed in your project. Before you do a release build, you'll need to configure a few values in Expo.plist and AndroidManifest.xml in order for updates to work.`\n      );\n    }\n    // TODO: add equivalent of this or some command to wrap it:\n    // # ios\n    // $ open -a Xcode ./ios/{PROJECT_NAME}.xcworkspace\n    // # android\n    // $ open -a /Applications/Android\\\\ Studio.app ./android\n  }\n}\n\nasync function configureUpdatesProjectFilesAsync(\n  projectRoot: string,\n  initialConfig: BareAppConfig,\n  username: string\n) {\n  // skipSDKVersionRequirement here so that this will work when you use the\n  // --no-install flag. the tradeoff is that the SDK version field won't be\n  // filled in, but we should be getting rid of that for expo-updates ASAP\n  // anyways.\n  const { exp } = getConfig(projectRoot, { skipSDKVersionRequirement: true });\n\n  // apply Android config\n  const androidManifestPath = await AndroidConfig.Paths.getAndroidManifestAsync(projectRoot);\n  const androidManifestJSON = await AndroidConfig.Manifest.readAndroidManifestAsync(\n    androidManifestPath\n  );\n  const result = await AndroidConfig.Updates.setUpdatesConfig(exp, androidManifestJSON, username);\n  await AndroidConfig.Manifest.writeAndroidManifestAsync(androidManifestPath, result);\n\n  // apply iOS config\n  const iosSourceRoot = IOSConfig.Paths.getSourceRoot(projectRoot);\n  const supportingDirectory = path.join(iosSourceRoot, 'Supporting');\n\n  const plistFilePath = path.join(supportingDirectory, 'Expo.plist');\n  let data = plist.parse(fs.readFileSync(plistFilePath, 'utf8'));\n  data = IOSConfig.Updates.setUpdatesConfig(exp, data, username);\n\n  await fs.writeFile(plistFilePath, plist.build(data));\n}\n\nexport default function (program: Command) {\n  program\n    .command('init [path]')\n    .alias('i')\n    .helpGroup('core')\n    .description('Create a new Expo project')\n    .option(\n      '-t, --template [name]',\n      'Specify which template to use. Valid options are \"blank\", \"tabs\", \"bare-minimum\" or a package on npm (e.g. \"expo-template-bare-typescript\") that includes an Expo project template.'\n    )\n    .option('--npm', 'Use npm to install dependencies. (default when Yarn is not installed)')\n    .option('--yarn', 'Use Yarn to install dependencies. (default when Yarn is installed)')\n    .option('--no-install', 'Skip installing npm packages or CocoaPods.')\n    .option('--name [name]', 'The name of your app visible on the home screen.')\n    .option('--yes', 'Use default options. Same as \"expo init . --template blank')\n    .asyncAction(action);\n}\n"],"file":"init.js"}